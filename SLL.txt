### Combined Visual Representation of SLL Operations

#### Initial List State
```
NULL
```

#### 1. **Insert at Start (Insert 10)**
```
+-----+----+    +-----+----+
| 10  | *----> | NULL  |
+-----+----+
 Head
```

#### 2. **Insert at Last (Insert 20)**
```
+-----+----+    +-----+----+    +-----+----+
| 10  | *----> | 20  | *----> | NULL  |
+-----+----+    +-----+----+
 Head              Temp
```

#### 3. **Insert at Last (Insert 30)**
```
+-----+----+    +-----+----+    +-----+----+    +-----+----+
| 10  | *----> | 20  | *----> | 30  | *----> | NULL  |
+-----+----+    +-----+----+    +-----+----+
 Head              Temp
```

#### 4. **Insert After (Insert 25 after 20)**
```
+-----+----+    +-----+----+    +-----+----+    +-----+----+    +-----+----+
| 10  | *----> | 20  | *----> | 25  | *----> | 30  | *----> | NULL  |
+-----+----+    +-----+----+    +-----+----+    +-----+----+
 Head              Temp
```

#### 5. **Search (Find node with value 25)**
```
+-----+----+    +-----+----+    +-----+----+    +-----+----+
| 10  | *----> | 20  | *----> | 25  | *----> | 30  | *----> | NULL  |
+-----+----+    +-----+----+    +-----+----+    +-----+----+
 Head              Temp                  Found
```

#### 6. **Delete First (Remove node 10)**
```
+-----+----+    +-----+----+    +-----+----+
| 20  | *----> | 25  | *----> | 30  | *----> | NULL  |
+-----+----+    +-----+----+    +-----+----+
 New Head         Temp
```

#### 7. **Delete Last (Remove node 30)**
```
+-----+----+    +-----+----+
| 20  | *----> | 25  | *----> | NULL  |
+-----+----+    +-----+----+
 Head              Temp
```

#### 8. **Delete Item (Remove node 25)**
```
+-----+----+    +-----+----+
| 20  | *----> | NULL  |
+-----+----+
 Head
```

### Summary of Operations

1. **Insert at Start**: The new node becomes the new head.
2. **Insert at Last**: Traverse to the end and insert the new node.
3. **Insert After**: Insert a new node after the specified node.
4. **Search**: Traverse the list to find the specified node.
5. **Delete First**: Update the head to point to the second node.
6. **Delete Last**: Traverse to the second-to-last node and set its next to `NULL`.
7. **Delete Item**: Find the node and adjust pointers to remove it.

The temporary pointer (`temp`) is used to traverse and manipulate the list, ensuring operations are performed correctly.
